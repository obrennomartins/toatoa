name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  sonarcloud:
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"obrennomartins_toatoa" /o:"obrennomartins" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  codacy:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Verificar código
        uses: actions/checkout@v3

      - name: Instalar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependências
        run: dotnet restore

      - name: Rodar testes unitários
        run: dotnet test --configuration Release

      - name: Upload de resultados para Codacy
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --token ${{ secrets.CODACY_PROJECT_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: codacy
    steps:
      - name: Checar código
        uses: actions/checkout@v3

      - name: Definir variáveis de metadados
        id: vars
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "GIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Construir imagem Docker
        run: |
          docker build -t ${{ secrets.CONTAINER_REGISTRY_ADDRESS }}/${{ secrets.CONTAINER_REGISTRY_NAMESPACE }}/${{ secrets.CONTAINER_REGISTRY_IMAGE_NAME }}:${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH }} \
                        --label "org.opencontainers.image.created=${{ env.BUILD_DATE }}" \
                        --label "org.opencontainers.image.revision=${{ env.COMMIT_HASH }}" \
                        --label "org.opencontainers.image.source=${{ github.repository }}" \
                        --label "org.opencontainers.image.authors=${{ env.GIT_AUTHOR }}" \
                        --label "org.opencontainers.image.title=${{ github.event.repository.name }}" \
                        --label "org.opencontainers.image.description=${{ env.COMMIT_MESSAGE }}" .

      - name: Entrar no registro 
        run: echo "${{ secrets.CONTAINER_REGISTRY_PASSWORD }}" | docker login ${{ secrets.CONTAINER_REGISTRY_ADDRESS }} -u "${{ secrets.CONTAINER_REGISTRY_USERNAME }}" --password-stdin

      - name: Enviar imagem para registro
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ADDRESS }}/${{ secrets.CONTAINER_REGISTRY_NAMESPACE }}/${{ secrets.CONTAINER_REGISTRY_IMAGE_NAME }}:${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH }}